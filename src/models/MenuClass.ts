/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ItemTimeSlotClass } from './ItemTimeSlotClass';
import {
    ItemTimeSlotClassFromJSON,
    ItemTimeSlotClassFromJSONTyped,
    ItemTimeSlotClassToJSON,
} from './ItemTimeSlotClass';
import type { MenuClassItem } from './MenuClassItem';
import {
    MenuClassItemFromJSON,
    MenuClassItemFromJSONTyped,
    MenuClassItemToJSON,
} from './MenuClassItem';

/**
 * 
 * @export
 * @interface MenuClass
 */
export interface MenuClass {
    /**
     * 
     * @type {MenuClassItem}
     * @memberof MenuClass
     */
    item: MenuClassItem;
    /**
     * Item limit per day 0 = category is not limited
     * @type {number}
     * @memberof MenuClass
     */
    itemLimitPerDay: number;
    /**
     * To check if the item is available
     * @type {boolean}
     * @memberof MenuClass
     */
    available: boolean;
    /**
     * True if the item should be visible to the customer , item can be available but not be visible
     * @type {boolean}
     * @memberof MenuClass
     */
    visible: boolean;
    /**
     * Position of the item in the store menu
     * @type {number}
     * @memberof MenuClass
     */
    orderPosition: number;
    /**
     * Item category name
     * @type {string}
     * @memberof MenuClass
     */
    category: string;
    /**
     * Item limit per time slot
     * @type {Array<ItemTimeSlotClass>}
     * @memberof MenuClass
     */
    itemLimitPerTimeSlot: Array<ItemTimeSlotClass>;
}

/**
 * Check if a given object implements the MenuClass interface.
 */
export function instanceOfMenuClass(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "item" in value;
    isInstance = isInstance && "itemLimitPerDay" in value;
    isInstance = isInstance && "available" in value;
    isInstance = isInstance && "visible" in value;
    isInstance = isInstance && "orderPosition" in value;
    isInstance = isInstance && "category" in value;
    isInstance = isInstance && "itemLimitPerTimeSlot" in value;

    return isInstance;
}

export function MenuClassFromJSON(json: any): MenuClass {
    return MenuClassFromJSONTyped(json, false);
}

export function MenuClassFromJSONTyped(json: any, ignoreDiscriminator: boolean): MenuClass {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'item': MenuClassItemFromJSON(json['item']),
        'itemLimitPerDay': json['item_limit_per_day'],
        'available': json['available'],
        'visible': json['visible'],
        'orderPosition': json['order_position'],
        'category': json['category'],
        'itemLimitPerTimeSlot': ((json['item_limit_per_time_slot'] as Array<any>).map(ItemTimeSlotClassFromJSON)),
    };
}

export function MenuClassToJSON(value?: MenuClass | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'item': MenuClassItemToJSON(value.item),
        'item_limit_per_day': value.itemLimitPerDay,
        'available': value.available,
        'visible': value.visible,
        'order_position': value.orderPosition,
        'category': value.category,
        'item_limit_per_time_slot': ((value.itemLimitPerTimeSlot as Array<any>).map(ItemTimeSlotClassToJSON)),
    };
}

