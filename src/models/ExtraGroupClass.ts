/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GroupSelectionClass } from './GroupSelectionClass';
import {
    GroupSelectionClassFromJSON,
    GroupSelectionClassFromJSONTyped,
    GroupSelectionClassToJSON,
} from './GroupSelectionClass';

/**
 * 
 * @export
 * @interface ExtraGroupClass
 */
export interface ExtraGroupClass {
    /**
     * Indicates if extras within a group is REQUIRED to be added on cart with the item
     * @type {boolean}
     * @memberof ExtraGroupClass
     */
    isRequired: boolean;
    /**
     * The name of the extra group
     * @type {string}
     * @memberof ExtraGroupClass
     */
    name: string;
    /**
     * The description of the extra group
     * @type {string}
     * @memberof ExtraGroupClass
     */
    description: string;
    /**
     * Minimum number of extras within a group that NEEDS to be added on cart with the item
     * @type {number}
     * @memberof ExtraGroupClass
     */
    minimumNumber: number;
    /**
     * Maximum number of extras within a group that can be added on cart with the item
     * @type {number}
     * @memberof ExtraGroupClass
     */
    maximumNumber: number;
    /**
     * List of extras within a group
     * @type {Array<GroupSelectionClass>}
     * @memberof ExtraGroupClass
     */
    extras?: Array<GroupSelectionClass>;
}

/**
 * Check if a given object implements the ExtraGroupClass interface.
 */
export function instanceOfExtraGroupClass(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "isRequired" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "minimumNumber" in value;
    isInstance = isInstance && "maximumNumber" in value;

    return isInstance;
}

export function ExtraGroupClassFromJSON(json: any): ExtraGroupClass {
    return ExtraGroupClassFromJSONTyped(json, false);
}

export function ExtraGroupClassFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtraGroupClass {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isRequired': json['is_required'],
        'name': json['name'],
        'description': json['description'],
        'minimumNumber': json['minimum_number'],
        'maximumNumber': json['maximum_number'],
        'extras': !exists(json, 'extras') ? undefined : ((json['extras'] as Array<any>).map(GroupSelectionClassFromJSON)),
    };
}

export function ExtraGroupClassToJSON(value?: ExtraGroupClass | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'is_required': value.isRequired,
        'name': value.name,
        'description': value.description,
        'minimum_number': value.minimumNumber,
        'maximum_number': value.maximumNumber,
        'extras': value.extras === undefined ? undefined : ((value.extras as Array<any>).map(GroupSelectionClassToJSON)),
    };
}

