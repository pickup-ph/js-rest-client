/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CategoryClass } from './CategoryClass';
import {
    CategoryClassFromJSON,
    CategoryClassFromJSONTyped,
    CategoryClassToJSON,
} from './CategoryClass';
import type { MenuClass } from './MenuClass';
import {
    MenuClassFromJSON,
    MenuClassFromJSONTyped,
    MenuClassToJSON,
} from './MenuClass';
import type { StoreHoursClass } from './StoreHoursClass';
import {
    StoreHoursClassFromJSON,
    StoreHoursClassFromJSONTyped,
    StoreHoursClassToJSON,
} from './StoreHoursClass';

/**
 * 
 * @export
 * @interface StoreClass
 */
export interface StoreClass {
    /**
     * Id that will be used on searching store
     * @type {string}
     * @memberof StoreClass
     */
    id: string;
    /**
     * Store background image
     * @type {string}
     * @memberof StoreClass
     */
    storeBg: string;
    /**
     * Store distance limit for deliveries (in kilometers)
     * @type {number}
     * @memberof StoreClass
     */
    deliveryDistanceLimit: number;
    /**
     * Store accepts curbside delivery
     * @type {boolean}
     * @memberof StoreClass
     */
    isCurbsideActive: boolean;
    /**
     * Store accepts pickup order
     * @type {boolean}
     * @memberof StoreClass
     */
    isPickupActive: boolean;
    /**
     * Store accepts delivery order
     * @type {boolean}
     * @memberof StoreClass
     */
    isDeliveryActive: boolean;
    /**
     * Store accepts mealplan order
     * @type {boolean}
     * @memberof StoreClass
     */
    isMealPlanActive: boolean;
    /**
     * Store accepts dine in order
     * @type {boolean}
     * @memberof StoreClass
     */
    isDineInActive: boolean;
    /**
     * Total allowed number of items purchased on a store per day
     * @type {number}
     * @memberof StoreClass
     */
    storeItemLimitPerDay: number;
    /**
     * Indicates if a store accepts and process orders any time of the day
     * @type {boolean}
     * @memberof StoreClass
     */
    isOpen24Hours: boolean;
    /**
     * List of dates that indicates the store as closed and will NOT accept orders
     * @type {Array<string>}
     * @memberof StoreClass
     */
    offDates: Array<string>;
    /**
     * Store order prep time in minutes
     * @type {number}
     * @memberof StoreClass
     */
    preOrderToOrderQueueTimer: number;
    /**
     * Pre-order limit in days
     * @type {number}
     * @memberof StoreClass
     */
    daysAcceptingInAdvancedOrders: number;
    /**
     * Store menu grouped and ordered by category
     * @type {Array<MenuClass>}
     * @memberof StoreClass
     */
    menu: Array<MenuClass>;
    /**
     * Store category list
     * @type {Array<CategoryClass>}
     * @memberof StoreClass
     */
    categories: Array<CategoryClass>;
    /**
     * Helper for expected meal plan deliveries dates
     * @type {Array<string>}
     * @memberof StoreClass
     */
    mealPlanDates: Array<string>;
    /**
     * Store opening and closing time
     * @type {Array<StoreHoursClass>}
     * @memberof StoreClass
     */
    storeHours: Array<StoreHoursClass>;
    /**
     * Store display name
     * @type {string}
     * @memberof StoreClass
     */
    name: string;
    /**
     * Store display logo
     * @type {string}
     * @memberof StoreClass
     */
    storeLogo: string;
    /**
     * Store description
     * @type {string}
     * @memberof StoreClass
     */
    storeDescription: string;
    /**
     * Store reverse geocoded address string used in delivery order type
     * @type {string}
     * @memberof StoreClass
     */
    geocodeAddressString?: string;
    /**
     * Merchant displayed contact number
     * @type {string}
     * @memberof StoreClass
     */
    contactNumber: string;
    /**
     * Store status helper, pertains to store being open and will be accepting order
     * @type {boolean}
     * @memberof StoreClass
     */
    isStoreOpen: boolean;
}

/**
 * Check if a given object implements the StoreClass interface.
 */
export function instanceOfStoreClass(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "storeBg" in value;
    isInstance = isInstance && "deliveryDistanceLimit" in value;
    isInstance = isInstance && "isCurbsideActive" in value;
    isInstance = isInstance && "isPickupActive" in value;
    isInstance = isInstance && "isDeliveryActive" in value;
    isInstance = isInstance && "isMealPlanActive" in value;
    isInstance = isInstance && "isDineInActive" in value;
    isInstance = isInstance && "storeItemLimitPerDay" in value;
    isInstance = isInstance && "isOpen24Hours" in value;
    isInstance = isInstance && "offDates" in value;
    isInstance = isInstance && "preOrderToOrderQueueTimer" in value;
    isInstance = isInstance && "daysAcceptingInAdvancedOrders" in value;
    isInstance = isInstance && "menu" in value;
    isInstance = isInstance && "categories" in value;
    isInstance = isInstance && "mealPlanDates" in value;
    isInstance = isInstance && "storeHours" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "storeLogo" in value;
    isInstance = isInstance && "storeDescription" in value;
    isInstance = isInstance && "contactNumber" in value;
    isInstance = isInstance && "isStoreOpen" in value;

    return isInstance;
}

export function StoreClassFromJSON(json: any): StoreClass {
    return StoreClassFromJSONTyped(json, false);
}

export function StoreClassFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreClass {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'storeBg': json['store_bg'],
        'deliveryDistanceLimit': json['delivery_distance_limit'],
        'isCurbsideActive': json['is_curbside_active'],
        'isPickupActive': json['is_pickup_active'],
        'isDeliveryActive': json['is_delivery_active'],
        'isMealPlanActive': json['is_meal_plan_active'],
        'isDineInActive': json['is_dine_in_active'],
        'storeItemLimitPerDay': json['store_item_limit_per_day'],
        'isOpen24Hours': json['is_open_24_hours'],
        'offDates': json['off_dates'],
        'preOrderToOrderQueueTimer': json['pre_order_to_order_queue_timer'],
        'daysAcceptingInAdvancedOrders': json['days_accepting_in_advanced_orders'],
        'menu': ((json['menu'] as Array<any>).map(MenuClassFromJSON)),
        'categories': ((json['categories'] as Array<any>).map(CategoryClassFromJSON)),
        'mealPlanDates': json['meal_plan_dates'],
        'storeHours': ((json['store_hours'] as Array<any>).map(StoreHoursClassFromJSON)),
        'name': json['name'],
        'storeLogo': json['store_logo'],
        'storeDescription': json['store_description'],
        'geocodeAddressString': !exists(json, 'geocode_address_string') ? undefined : json['geocode_address_string'],
        'contactNumber': json['contact_number'],
        'isStoreOpen': json['is_store_open'],
    };
}

export function StoreClassToJSON(value?: StoreClass | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'store_bg': value.storeBg,
        'delivery_distance_limit': value.deliveryDistanceLimit,
        'is_curbside_active': value.isCurbsideActive,
        'is_pickup_active': value.isPickupActive,
        'is_delivery_active': value.isDeliveryActive,
        'is_meal_plan_active': value.isMealPlanActive,
        'is_dine_in_active': value.isDineInActive,
        'store_item_limit_per_day': value.storeItemLimitPerDay,
        'is_open_24_hours': value.isOpen24Hours,
        'off_dates': value.offDates,
        'pre_order_to_order_queue_timer': value.preOrderToOrderQueueTimer,
        'days_accepting_in_advanced_orders': value.daysAcceptingInAdvancedOrders,
        'menu': ((value.menu as Array<any>).map(MenuClassToJSON)),
        'categories': ((value.categories as Array<any>).map(CategoryClassToJSON)),
        'meal_plan_dates': value.mealPlanDates,
        'store_hours': ((value.storeHours as Array<any>).map(StoreHoursClassToJSON)),
        'name': value.name,
        'store_logo': value.storeLogo,
        'store_description': value.storeDescription,
        'geocode_address_string': value.geocodeAddressString,
        'contact_number': value.contactNumber,
        'is_store_open': value.isStoreOpen,
    };
}

