/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ItemPartialClass
 */
export interface ItemPartialClass {
    /**
     * Item id that will be used for cart building on /cart route
     * @type {string}
     * @memberof ItemPartialClass
     */
    id?: string;
    /**
     * Store which this item belongs to, can be used for filtering
     * @type {string}
     * @memberof ItemPartialClass
     */
    storeId?: string;
    /**
     * The name of the item
     * @type {string}
     * @memberof ItemPartialClass
     */
    name: string;
    /**
     * The description of the item
     * @type {string}
     * @memberof ItemPartialClass
     */
    description: string;
    /**
     * The nominated item display image in url form
     * @type {string}
     * @memberof ItemPartialClass
     */
    imageUrl: string;
    /**
     * The item discount description
     * @type {string}
     * @memberof ItemPartialClass
     */
    discountDescription?: string;
    /**
     * The peso value of the current active item discount. If discount_type is rawDiscount, this is equal to the discount_value. If percentDiscount, this is equal to the regular_price multiplied to the discount_value/100.
     * @type {string}
     * @memberof ItemPartialClass
     */
    activeDiscount?: string;
    /**
     * The active price of the item, if there is an active discount, this should be equal to the discounted_price, if there is no active discount, this should be equal to the regular price
     * @type {string}
     * @memberof ItemPartialClass
     */
    price: string;
    /**
     * The type of discount applied ("noDiscount", "rawDiscount", "percentDiscount")
     * @type {string}
     * @memberof ItemPartialClass
     */
    discountType?: string;
    /**
     * The value of the discount applied. For example if discount_value is "20", if discount_type is percentDiscount, this means 20% off. If discount_type is rawDiscount, this means P20.00 off.
     * @type {string}
     * @memberof ItemPartialClass
     */
    discountValue?: string;
    /**
     * The peso value of the item, applying the active_discount to the regular_price.
     * @type {string}
     * @memberof ItemPartialClass
     */
    discountedPrice: string;
    /**
     * The peso value of the item without any discounts.
     * @type {string}
     * @memberof ItemPartialClass
     */
    regularPrice?: string;
    /**
     * Item tags
     * @type {Array<string>}
     * @memberof ItemPartialClass
     */
    tags: Array<string>;
    /**
     * Indicates item to not be shown to customers on an off-date
     * @type {boolean}
     * @memberof ItemPartialClass
     */
    isVisibleOnOffDate?: boolean;
    /**
     * Item is available for order
     * @type {boolean}
     * @memberof ItemPartialClass
     */
    available?: boolean;
    /**
     * Item category, should be in store category list
     * @type {string}
     * @memberof ItemPartialClass
     */
    category?: string;
    /**
     * Indicates if item has an extra group to be shown as part of the order
     * @type {boolean}
     * @memberof ItemPartialClass
     */
    extras?: boolean;
    /**
     * Indicates if item should be visible to the customer
     * @type {boolean}
     * @memberof ItemPartialClass
     */
    visible?: boolean;
}

/**
 * Check if a given object implements the ItemPartialClass interface.
 */
export function instanceOfItemPartialClass(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "imageUrl" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "discountedPrice" in value;
    isInstance = isInstance && "tags" in value;

    return isInstance;
}

export function ItemPartialClassFromJSON(json: any): ItemPartialClass {
    return ItemPartialClassFromJSONTyped(json, false);
}

export function ItemPartialClassFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemPartialClass {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'storeId': !exists(json, 'store_id') ? undefined : json['store_id'],
        'name': json['name'],
        'description': json['description'],
        'imageUrl': json['image_url'],
        'discountDescription': !exists(json, 'discount_description') ? undefined : json['discount_description'],
        'activeDiscount': !exists(json, 'active_discount') ? undefined : json['active_discount'],
        'price': json['price'],
        'discountType': !exists(json, 'discount_type') ? undefined : json['discount_type'],
        'discountValue': !exists(json, 'discount_value') ? undefined : json['discount_value'],
        'discountedPrice': json['discounted_price'],
        'regularPrice': !exists(json, 'regular_price') ? undefined : json['regular_price'],
        'tags': json['tags'],
        'isVisibleOnOffDate': !exists(json, 'is_visible_on_off_date') ? undefined : json['is_visible_on_off_date'],
        'available': !exists(json, 'available') ? undefined : json['available'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'extras': !exists(json, 'extras') ? undefined : json['extras'],
        'visible': !exists(json, 'visible') ? undefined : json['visible'],
    };
}

export function ItemPartialClassToJSON(value?: ItemPartialClass | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'store_id': value.storeId,
        'name': value.name,
        'description': value.description,
        'image_url': value.imageUrl,
        'discount_description': value.discountDescription,
        'active_discount': value.activeDiscount,
        'price': value.price,
        'discount_type': value.discountType,
        'discount_value': value.discountValue,
        'discounted_price': value.discountedPrice,
        'regular_price': value.regularPrice,
        'tags': value.tags,
        'is_visible_on_off_date': value.isVisibleOnOffDate,
        'available': value.available,
        'category': value.category,
        'extras': value.extras,
        'visible': value.visible,
    };
}

