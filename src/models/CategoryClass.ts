/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ItemTimeSlotClass } from './ItemTimeSlotClass';
import {
    ItemTimeSlotClassFromJSON,
    ItemTimeSlotClassFromJSONTyped,
    ItemTimeSlotClassToJSON,
} from './ItemTimeSlotClass';

/**
 * 
 * @export
 * @interface CategoryClass
 */
export interface CategoryClass {
    /**
     * Indicates an item to be an exclusive offering in a meal plan type order
     * @type {boolean}
     * @memberof CategoryClass
     */
    isExclusive: boolean;
    /**
     * Category identifier
     * @type {string}
     * @memberof CategoryClass
     */
    categoryName: string;
    /**
     * Position of the category in the menu
     * @type {number}
     * @memberof CategoryClass
     */
    categoryPosition: number;
    /**
     * The limit of category per day , 0 = category is not limited
     * @type {number}
     * @memberof CategoryClass
     */
    categoryLimitPerDay: number;
    /**
     * Limit of category per time slot
     * @type {Array<ItemTimeSlotClass>}
     * @memberof CategoryClass
     */
    categoryLimitPerTimeSlot: Array<ItemTimeSlotClass>;
    /**
     * True if the category should be visible to the customer
     * @type {boolean}
     * @memberof CategoryClass
     */
    visible: boolean;
}

/**
 * Check if a given object implements the CategoryClass interface.
 */
export function instanceOfCategoryClass(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "isExclusive" in value;
    isInstance = isInstance && "categoryName" in value;
    isInstance = isInstance && "categoryPosition" in value;
    isInstance = isInstance && "categoryLimitPerDay" in value;
    isInstance = isInstance && "categoryLimitPerTimeSlot" in value;
    isInstance = isInstance && "visible" in value;

    return isInstance;
}

export function CategoryClassFromJSON(json: any): CategoryClass {
    return CategoryClassFromJSONTyped(json, false);
}

export function CategoryClassFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryClass {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isExclusive': json['is_exclusive'],
        'categoryName': json['category_name'],
        'categoryPosition': json['category_position'],
        'categoryLimitPerDay': json['category_limit_per_day'],
        'categoryLimitPerTimeSlot': ((json['category_limit_per_time_slot'] as Array<any>).map(ItemTimeSlotClassFromJSON)),
        'visible': json['visible'],
    };
}

export function CategoryClassToJSON(value?: CategoryClass | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'is_exclusive': value.isExclusive,
        'category_name': value.categoryName,
        'category_position': value.categoryPosition,
        'category_limit_per_day': value.categoryLimitPerDay,
        'category_limit_per_time_slot': ((value.categoryLimitPerTimeSlot as Array<any>).map(ItemTimeSlotClassToJSON)),
        'visible': value.visible,
    };
}

