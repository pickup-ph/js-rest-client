/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CartDTOCustomer } from './CartDTOCustomer';
import {
    CartDTOCustomerFromJSON,
    CartDTOCustomerFromJSONTyped,
    CartDTOCustomerToJSON,
} from './CartDTOCustomer';
import type { CartItemDTO } from './CartItemDTO';
import {
    CartItemDTOFromJSON,
    CartItemDTOFromJSONTyped,
    CartItemDTOToJSON,
} from './CartItemDTO';

/**
 * 
 * @export
 * @interface CartDTO
 */
export interface CartDTO {
    /**
     * 
     * @type {Array<CartItemDTO>}
     * @memberof CartDTO
     */
    items: Array<CartItemDTO>;
    /**
     * 
     * @type {CartDTOCustomer}
     * @memberof CartDTO
     */
    customer?: CartDTOCustomer;
    /**
     * PickupPH supported order types
     * @type {string}
     * @memberof CartDTO
     */
    orderType: CartDTOOrderTypeEnum;
    /**
     * ISO8601 compliant date string, defaults to current server date
     * @type {string}
     * @memberof CartDTO
     */
    orderDate?: string;
    /**
     * Order time in HH:MM format, void (omitting it) means order is ASAP (current system, or nearest available time slot)
     * @type {string}
     * @memberof CartDTO
     */
    orderTime?: string;
}


/**
 * @export
 */
export const CartDTOOrderTypeEnum = {
    Delivery: 'delivery',
    Pickup: 'pickup',
    ThirdPartyPickup: 'third_party_pickup',
    CurbsidePickup: 'curbside_pickup'
} as const;
export type CartDTOOrderTypeEnum = typeof CartDTOOrderTypeEnum[keyof typeof CartDTOOrderTypeEnum];


/**
 * Check if a given object implements the CartDTO interface.
 */
export function instanceOfCartDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "orderType" in value;

    return isInstance;
}

export function CartDTOFromJSON(json: any): CartDTO {
    return CartDTOFromJSONTyped(json, false);
}

export function CartDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'items': ((json['items'] as Array<any>).map(CartItemDTOFromJSON)),
        'customer': !exists(json, 'customer') ? undefined : CartDTOCustomerFromJSON(json['customer']),
        'orderType': json['order_type'],
        'orderDate': !exists(json, 'order_date') ? undefined : json['order_date'],
        'orderTime': !exists(json, 'order_time') ? undefined : json['order_time'],
    };
}

export function CartDTOToJSON(value?: CartDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'items': ((value.items as Array<any>).map(CartItemDTOToJSON)),
        'customer': CartDTOCustomerToJSON(value.customer),
        'order_type': value.orderType,
        'order_date': value.orderDate,
        'order_time': value.orderTime,
    };
}

