/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CartItemDTO
 */
export interface CartItemDTO {
    /**
     * The 24 character hexadecimal string id of the item to be added or modified
     * @type {string}
     * @memberof CartItemDTO
     */
    id: string;
    /**
     * The item quantity to be set, 0 means item is for removal
     * @type {number}
     * @memberof CartItemDTO
     */
    quantity: number;
    /**
     * The extra option per item
     * @type {Array<string>}
     * @memberof CartItemDTO
     */
    extras?: Array<string>;
}

/**
 * Check if a given object implements the CartItemDTO interface.
 */
export function instanceOfCartItemDTO(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "quantity" in value;

    return isInstance;
}

export function CartItemDTOFromJSON(json: any): CartItemDTO {
    return CartItemDTOFromJSONTyped(json, false);
}

export function CartItemDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartItemDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'quantity': json['quantity'],
        'extras': !exists(json, 'extras') ? undefined : json['extras'],
    };
}

export function CartItemDTOToJSON(value?: CartItemDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'quantity': value.quantity,
        'extras': value.extras,
    };
}

