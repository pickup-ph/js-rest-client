/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StoreHoursClass } from './StoreHoursClass';
import {
    StoreHoursClassFromJSON,
    StoreHoursClassFromJSONTyped,
    StoreHoursClassToJSON,
} from './StoreHoursClass';

/**
 * 
 * @export
 * @interface StorePartialClass
 */
export interface StorePartialClass {
    /**
     * Id that will be used on searching store
     * @type {string}
     * @memberof StorePartialClass
     */
    id: string;
    /**
     * Store background image
     * @type {string}
     * @memberof StorePartialClass
     */
    storeBg: string;
    /**
     * Store distance limit for deliveries (in kilometers)
     * @type {number}
     * @memberof StorePartialClass
     */
    deliveryDistanceLimit: number;
    /**
     * Store opening and closing time
     * @type {Array<StoreHoursClass>}
     * @memberof StorePartialClass
     */
    storeHours: Array<StoreHoursClass>;
    /**
     * Store display name
     * @type {string}
     * @memberof StorePartialClass
     */
    name: string;
    /**
     * Store display logo
     * @type {string}
     * @memberof StorePartialClass
     */
    storeLogo: string;
    /**
     * Store description
     * @type {string}
     * @memberof StorePartialClass
     */
    storeDescription: string;
    /**
     * Store reverse geocoded address string used in delivery order type
     * @type {string}
     * @memberof StorePartialClass
     */
    geocodeAddressString?: string;
    /**
     * Merchant displayed contact number
     * @type {string}
     * @memberof StorePartialClass
     */
    contactNumber: string;
    /**
     * Store status helper, pertains to store being open and will be accepting order
     * @type {boolean}
     * @memberof StorePartialClass
     */
    isStoreOpen: boolean;
}

/**
 * Check if a given object implements the StorePartialClass interface.
 */
export function instanceOfStorePartialClass(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "storeBg" in value;
    isInstance = isInstance && "deliveryDistanceLimit" in value;
    isInstance = isInstance && "storeHours" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "storeLogo" in value;
    isInstance = isInstance && "storeDescription" in value;
    isInstance = isInstance && "contactNumber" in value;
    isInstance = isInstance && "isStoreOpen" in value;

    return isInstance;
}

export function StorePartialClassFromJSON(json: any): StorePartialClass {
    return StorePartialClassFromJSONTyped(json, false);
}

export function StorePartialClassFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorePartialClass {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'storeBg': json['store_bg'],
        'deliveryDistanceLimit': json['delivery_distance_limit'],
        'storeHours': ((json['store_hours'] as Array<any>).map(StoreHoursClassFromJSON)),
        'name': json['name'],
        'storeLogo': json['store_logo'],
        'storeDescription': json['store_description'],
        'geocodeAddressString': !exists(json, 'geocode_address_string') ? undefined : json['geocode_address_string'],
        'contactNumber': json['contact_number'],
        'isStoreOpen': json['is_store_open'],
    };
}

export function StorePartialClassToJSON(value?: StorePartialClass | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'store_bg': value.storeBg,
        'delivery_distance_limit': value.deliveryDistanceLimit,
        'store_hours': ((value.storeHours as Array<any>).map(StoreHoursClassToJSON)),
        'name': value.name,
        'store_logo': value.storeLogo,
        'store_description': value.storeDescription,
        'geocode_address_string': value.geocodeAddressString,
        'contact_number': value.contactNumber,
        'is_store_open': value.isStoreOpen,
    };
}

