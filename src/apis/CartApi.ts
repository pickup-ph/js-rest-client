/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CartDTO,
  CartEntity,
} from '../models';
import {
    CartDTOFromJSON,
    CartDTOToJSON,
    CartEntityFromJSON,
    CartEntityToJSON,
} from '../models';

export interface CartControllerCreateRequest {
    cartDTO: CartDTO;
}

/**
 * CartApi - interface
 * 
 * @export
 * @interface CartApiInterface
 */
export interface CartApiInterface {
    /**
     * 
     * @summary Create cart
     * @param {CartDTO} cartDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartApiInterface
     */
    cartControllerCreateRaw(requestParameters: CartControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartEntity>>;

    /**
     * Create cart
     */
    cartControllerCreate(requestParameters: CartControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartEntity>;

}

/**
 * 
 */
export class CartApi extends runtime.BaseAPI implements CartApiInterface {

    /**
     * Create cart
     */
    async cartControllerCreateRaw(requestParameters: CartControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartEntity>> {
        if (requestParameters.cartDTO === null || requestParameters.cartDTO === undefined) {
            throw new runtime.RequiredError('cartDTO','Required parameter requestParameters.cartDTO was null or undefined when calling cartControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // api-key authentication
        }

        const response = await this.request({
            path: `/v1/cart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartDTOToJSON(requestParameters.cartDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartEntityFromJSON(jsonValue));
    }

    /**
     * Create cart
     */
    async cartControllerCreate(requestParameters: CartControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartEntity> {
        const response = await this.cartControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
