/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StoreClass,
  StoresEntity,
} from '../models';
import {
    StoreClassFromJSON,
    StoreClassToJSON,
    StoresEntityFromJSON,
    StoresEntityToJSON,
} from '../models';

export interface StoreControllerFindRequest {
    orderDate?: string;
    orderTime?: string;
    name?: string;
    tags?: Array<string>;
    maxDistance?: number;
    openOnly?: boolean;
    limit?: number;
    offset?: number;
}

export interface StoreControllerFindOneRequest {
    id: string;
}

/**
 * StoreApi - interface
 * 
 * @export
 * @interface StoreApiInterface
 */
export interface StoreApiInterface {
    /**
     * 
     * @summary Find store
     * @param {string} [orderDate] ISO8601 compliant date string, defaults to current server date
     * @param {string} [orderTime] Pre-order time filter in HH:MM format, void (omitting it) means stores that accepts ASAP order will be returned
     * @param {string} [name] Part or full name of the store
     * @param {Array<string>} [tags] Store tags filter comma separated
     * @param {number} [maxDistance] Maximum store distance from the customer in kilometers
     * @param {boolean} [openOnly] Store status filter, null means all stores will be returned regardless if it is open or closed on the selected order_date and order_time
     * @param {number} [limit] The number of record to return, 0 means all will be returned
     * @param {number} [offset] The number of records to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApiInterface
     */
    storeControllerFindRaw(requestParameters: StoreControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoresEntity>>;

    /**
     * Find store
     */
    storeControllerFind(requestParameters: StoreControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoresEntity>;

    /**
     * 
     * @summary Get store information
     * @param {string} id ID of store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApiInterface
     */
    storeControllerFindOneRaw(requestParameters: StoreControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreClass>>;

    /**
     * Get store information
     */
    storeControllerFindOne(requestParameters: StoreControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreClass>;

}

/**
 * 
 */
export class StoreApi extends runtime.BaseAPI implements StoreApiInterface {

    /**
     * Find store
     */
    async storeControllerFindRaw(requestParameters: StoreControllerFindRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoresEntity>> {
        const queryParameters: any = {};

        if (requestParameters.orderDate !== undefined) {
            queryParameters['order_date'] = requestParameters.orderDate;
        }

        if (requestParameters.orderTime !== undefined) {
            queryParameters['order_time'] = requestParameters.orderTime;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags;
        }

        if (requestParameters.maxDistance !== undefined) {
            queryParameters['max_distance'] = requestParameters.maxDistance;
        }

        if (requestParameters.openOnly !== undefined) {
            queryParameters['open_only'] = requestParameters.openOnly;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // api-key authentication
        }

        const response = await this.request({
            path: `/v1/store`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoresEntityFromJSON(jsonValue));
    }

    /**
     * Find store
     */
    async storeControllerFind(requestParameters: StoreControllerFindRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoresEntity> {
        const response = await this.storeControllerFindRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get store information
     */
    async storeControllerFindOneRaw(requestParameters: StoreControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StoreClass>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling storeControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // api-key authentication
        }

        const response = await this.request({
            path: `/v1/store/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreClassFromJSON(jsonValue));
    }

    /**
     * Get store information
     */
    async storeControllerFindOne(requestParameters: StoreControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StoreClass> {
        const response = await this.storeControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
