/* tslint:disable */
/* eslint-disable */
/**
 * Pickup API
 * # Authorization   Pickup API accepts one type of authentication   <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ItemClass,
  ItemInventoryEntity,
  ItemsEntity,
} from '../models';
import {
    ItemClassFromJSON,
    ItemClassToJSON,
    ItemInventoryEntityFromJSON,
    ItemInventoryEntityToJSON,
    ItemsEntityFromJSON,
    ItemsEntityToJSON,
} from '../models';

export interface ItemControllerAggregateIdRequest {
    id: string;
}

export interface ItemControllerAggregateSearchRequest {
    name?: string;
    storeId?: string;
    limit?: number;
    offset?: number;
}

export interface ItemControllerGetSoldQuantityRequest {
    id: string;
    orderDate?: string;
    orderTime?: string;
}

/**
 * ItemApi - interface
 * 
 * @export
 * @interface ItemApiInterface
 */
export interface ItemApiInterface {
    /**
     * 
     * @summary Get item data
     * @param {string} id ID of item
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    itemControllerAggregateIdRaw(requestParameters: ItemControllerAggregateIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemClass>>;

    /**
     * Get item data
     */
    itemControllerAggregateId(requestParameters: ItemControllerAggregateIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemClass>;

    /**
     * 
     * @summary Search items by name
     * @param {string} [name] Item name search key, part of full name
     * @param {string} [storeId] Filter items via store ID
     * @param {number} [limit] The number of record to return, 0 means all will be returned
     * @param {number} [offset] The number of records to skip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    itemControllerAggregateSearchRaw(requestParameters: ItemControllerAggregateSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsEntity>>;

    /**
     * Search items by name
     */
    itemControllerAggregateSearch(requestParameters: ItemControllerAggregateSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsEntity>;

    /**
     * 
     * @summary Get inventory of an item
     * @param {string} id ID of item
     * @param {string} [orderDate] ISO8601 compliant date string, defaults to current server date
     * @param {string} [orderTime] Order time in HH:MM format, void (omitting it) means order is ASAP (current system, or nearest available time slot)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemApiInterface
     */
    itemControllerGetSoldQuantityRaw(requestParameters: ItemControllerGetSoldQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemInventoryEntity>>;

    /**
     * Get inventory of an item
     */
    itemControllerGetSoldQuantity(requestParameters: ItemControllerGetSoldQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemInventoryEntity>;

}

/**
 * 
 */
export class ItemApi extends runtime.BaseAPI implements ItemApiInterface {

    /**
     * Get item data
     */
    async itemControllerAggregateIdRaw(requestParameters: ItemControllerAggregateIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemClass>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemControllerAggregateId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // api-key authentication
        }

        const response = await this.request({
            path: `/v1/item/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemClassFromJSON(jsonValue));
    }

    /**
     * Get item data
     */
    async itemControllerAggregateId(requestParameters: ItemControllerAggregateIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemClass> {
        const response = await this.itemControllerAggregateIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search items by name
     */
    async itemControllerAggregateSearchRaw(requestParameters: ItemControllerAggregateSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsEntity>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.storeId !== undefined) {
            queryParameters['store_id'] = requestParameters.storeId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // api-key authentication
        }

        const response = await this.request({
            path: `/v1/item`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsEntityFromJSON(jsonValue));
    }

    /**
     * Search items by name
     */
    async itemControllerAggregateSearch(requestParameters: ItemControllerAggregateSearchRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsEntity> {
        const response = await this.itemControllerAggregateSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get inventory of an item
     */
    async itemControllerGetSoldQuantityRaw(requestParameters: ItemControllerGetSoldQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemInventoryEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling itemControllerGetSoldQuantity.');
        }

        const queryParameters: any = {};

        if (requestParameters.orderDate !== undefined) {
            queryParameters['order_date'] = requestParameters.orderDate;
        }

        if (requestParameters.orderTime !== undefined) {
            queryParameters['order_time'] = requestParameters.orderTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // api-key authentication
        }

        const response = await this.request({
            path: `/v1/item/{id}/stock`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemInventoryEntityFromJSON(jsonValue));
    }

    /**
     * Get inventory of an item
     */
    async itemControllerGetSoldQuantity(requestParameters: ItemControllerGetSoldQuantityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemInventoryEntity> {
        const response = await this.itemControllerGetSoldQuantityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
